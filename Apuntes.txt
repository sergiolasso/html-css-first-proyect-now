Front-end

Todo lo que tenga que ver con lo que ve el usuario. Que se vea bonito 

Tiene que manejar : 
 - HTML
 - CSS 
 - JS

La mayoria de trabajadores de este sector utilizan framewords, para poder ser mas eficientes


Preprocesdores CSS:  

Técnologias que se utilizan para trabajar con CSS de forma más comoda 


Compiladores de JS: 

Babel o webpack 


Como buena practica: 

Se debe de trabajar siempre sobre las ultimas versiones de JS 


Back-end 

Personas que trabajan la parte del servidor. Se encarga de las cosas que no vee el usuario, la parte lógica.

Se usaban varios lenguajes de programación. (Python, java, GO ...)

Frameworks paratrabajar en ello. (larabel, spring...) cada uno es para un lenguaje de programación distinto. 

Todo lo que se utilica de forma másiva (app store, hosting ...) debe subirse a la nube. 

Se encargan de la conexión a base de datos BB.DD. 


Full Stack 

Hace todo. Entiende todas las partes del proceso dentro de una app. 
No es lo más correcto debido a que hay muchas tecnología que se actualizan cada pocos meses. 

Es algo bastante habitual en pequeñas empresas 


Paginas estáticas (Landing pages)

Son paginas informativas. 
No suelen modificar la información que muestran una vez subida. 
El mejor ejemplo son los blogpop donde se comparte información pero el usuario apenas puede hacer nada. 


Paginas dinamicas (Web Apps)

Tiene una conexion a base de datos. 
Twitter, facebook, platzi ... van cambiando cada poco tiempo. 
El usuario puede interactuar. 
Suele ser necesario un registro para usarla. 
Usa base de datos. 

HTML 


<!DOCTYPE html> -----> En todas las paginas para que el navegador sepa donde esta
<html lang="es"> -----> Idioma 
<head> -----> contenido que no va a ver al usuario y que da información al servidor o buscador
    <meta charset="UTF-8"> -----> Caracteres especiales
    <meta name="description" content="Primera pagina slasso"> 
    
    -----> Descripcion de la pagina web 

    <meta name="robots" content="index, follow">

    -----> Cosas para que los algoritmos coloquen mejor la pagina 

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    -----> Responsive (Lo tiene que tener todas las paginas webs)

    <title>Mi tercera pagina web</title> -----> titulo pagina web
    <link rel="stylesheet" href="css/styles.css"> -----> conexion entre una pagina y las hojas de estilos
</head>
<body>
    
    -----> contenido real que va a ver el usuario
    
</body>
</html>

    <header> ----> Encabezado
        <nav></nav> -----> Menu de navegación
    </header>
    <main> -----> Contenido principal de la pagina
        <section> -----> Sección de contenido con varios articulos 
            <article></article> -----> Contenido de una sección
            <article></article>
        </section>
        <ul> ---> Creación de una lista desordenada. 
            <li>Soy una patata</li> ---> Elemento dentro de una lista.
            <li></li>
        </ul>
        <ol> -----> Creación de una lista ordenada. 
            <li>Soy una patata ordenada</li>
        </ol>
        <p>Soy un parrafo</p> ----> Creación de un parrafo 
        <h1>Soy un titulo</h1> -----> Creación de un titul o
        <h2>Soy un subtitulo</h2>
        <a href="index.html">Soy un link malicioso</a> -----> Etiquetas de un link. (Si no se ponde href la pagina se refresca)
    </main>
    <footer> -----> Pie de pagina de una web.
    </footer>


Tipos de imagenes 


Lossy (con pedida)

CALIDAD -
PESO -

JPG (fotos), JPEG 


Lossless (sin perdida)

CALIDAD + 
PESO +

PNG (transparencia), GIT, SVG (No se pixela / para logos)


OPTIMIZACIÓ DE IMAGENES 

Una imagen no debe de superar los 70 - 100 kB. 

ETIQUETAS DE IMAGENES 

<section>
    <figure> ----> Etiqueta encapsuladora de BB. PP. 
        <img src="/img/imagenGrande.jpg" alt="Grande"> -----> Etiqueta de imagen. alt -> Accesibilidad src -> direccion 
    </figure>
    <figcaption>Es una imagen de un gatete</figcaption> ----> Pie de la imagen. 
</section>

<video controls preload="auto"> ---> etiqueta de video 
                                -> controls es para los controles de video. 
                                --> preload="auto" es para que se vaya cargando el video. 

    <source src="img/little-cat.mp4#t=2,10"> ---> etiqueta para poner varios tipos de videos. mp3 mp4
</video>


Los formularios son muy importantes de cara a que es la forma en la que los usuarios nos dan informacion y siguen con los procesos de comprar por ejemplo.


<form action=""> ----> etiqueta para la creacion de un formulario
    <label for="nombre"> -----> elemento de un formulario
        <span>¿Cual es tu nombre? </span> ----> texto que sale en un formulario (nombre, fecha, apellidos)
        <input type="text" id="nombre" placeholder="Tu nombre"> ---> Zona donde se guardara lo que escriba el usuario.
        -> placeholder es una ayuda para que el usuario sepa que tiene que poner. 
        -> type indica el tipo de dato que se va a guardar.
    </label>
    <input type="datetime-local" id="calendario" name="calendario"> ---> el type datatime-local extrae los datos de fecha y hora de hoy lo que permite acelerar el rellenado de los datos y mejorando la actuación con el usuario. 
    <input type="submit"> ---> es el boton de enviar. 
</form>

El autocomplete permite al usuario rellenar los datos de un formulario con los datos que ya ha rellenado de forma habitual en otro. 

El required es utilizado para obligar al usuario a rellenar los campos obligatorios. 


La etiqueta select esta obsoleta. Con cada vez un mundo con más opciones en todo. La opción más como es ir escribiendo lo que uno desea, hasta que salga una opción con lo que uno quiere. 

OBSOLETO -> 

<select name="cursos" id="">
            <option value="">JavaScript</option>
            <option value="">HTML 5</option>
            <option value="">CSS3</option>
            <option value="">Web Standards</option>
</select>

Actual -> 

<input list="cursos">
    <datalist id="cursos">
        <option value="JavaScript"></option>
        <option value="HTML5"></option>
        <option value="CSS3"></option>
        <option value="Web Standards"></option>
    </datalist>

De esta forma el usuario puede ir escribiendo hasta encontrar lo que el quiere. 
Si por ejemplo no es ninguna de las opcciones que le hemos puesto en la lista. Podra mandarnos lo que el desea. 



CSS 3 

Funciona en cascada. 
Se trata de un estandar la cual nos permite estilizar las paginas webs 

Ejemplo: 

Escribes una carta: 
HTML es un lapiz, mientras que CSS es lapiz de color, los rotus y los colores. 

        <p style="font-size: 30px;">Soy un texto</p> ----> Esto es el método embebido. 

Una de las formas para la creaccion de clases para posteriormente poner los estilos se llama BEM. Esta metodología permite a los navegadores entenderlo mejor dando menos errores.         


EJEMPLOS DE PSEDOCLASES

.main-nav__item a:hover { ----> cuando el raton esta encima, es cuando se aplican estilos
    color: blue;
}

.main-nav__item a:active { -----> cuando el ratón ha hecho click, es cuando se aplican estos estilos. 
    color: red; 
}


Las pseudoclases, nos permiten, hacer modificaciones en los estilos cuando el usuario a interactuado con algún apartado de la pagina. 

EJEMPLO DE PSEUDO ELEMENTO --> MODIFICA EL CONTENIDO DEL HTML. 

.main-nav__item a:after { ----> se añade contenido despues de los elementos. 
    content: " | ";
}

En todos los buscadores, por defecto se añaden un padding y margin. 
Estos pueden eliminarse de la siguiente forma: 
*{ ----> Selector universal.
    box-sizing: border-box;
    padding: 0; 
    margin: 0;
}


HERENCIA EN CSS

Herencia cosiste en que si le has daod estilos al main y después tienes p dentro, p hereda lo que tenga el main. 

Hay una forma de ponerlo en css, la cual permite a este heredar si esta fuera. 

h1{
    font-size: inherit;
}

Con esto, h1 ha heredado el main en el que esta incluido. 


IMPORTANCA 

Esto sigue las misma normas que el tráfico. 
Si dos reglas de css, tienen el mismo nivel de importancia, ya que funciona es la más especifica, mientras que tiene la misma importancia y especificidad, sera la que más abajo se encuentre.

REGLA DE CASCADA

1. Se cargan los estilos del navegador 
2. Se cargan nuestro estilos.css
3. !important --> Quita todos los estilos que haya y hace lo que tenga ese important. 


ESPECIFICIDAD

1. !important
2. Las etiquetas embebidas en el HTML
3. # id
4. .class
5. tag 

Poner lo que más nos interese que salga en la parte de abajo. 


No es bueno poner estilos en el html, debido a que si después quieres modificarlo, no puedes ya que por nivel de importancia, el que manda es el que ponga las cosas en el html y el css tiene menos importancia. 


No se considera buena practica el uso de los id, salvo en circunstancias en la que de verdad va a ser unico. Los proyectos al ser tan grandes y trabajar muchas personas en ellos, es posible que alguien intente modificarlo y esto de problemas de especificidad.


COMBINADORES 

Los combiadores nos permiten tener una especificidad mas certera.

Especificidad por "hermanos cercanos": 

h2 + p{ ----> pon en color rojo, aquellos parrafos los cuales estan cerca de un h2, por debajo.
    color: red ;
}

    <h2>Soy un h2</h2>
    <p>Soy un parrafo</p> ----> Este rojo 
    <h3>Soy un h3</h3>
    <p>Soy un parrafo</p> ----> Este negro
    <h2>Soy un h2</h2>

Espeficidad de "Hermano General": 

h2 ~ p{ ----> Lo mismo pero estos tiñen tanto arriba como abajo.
    color: blue
}
        <h2>Soy un h2</h2>
        <p>Soy un parrafo</p> ----> blue
        <h2>Soy un h2</h2>
        <h3>Soy un h3</h3>
        <p>Soy un parrafo</p> ----> blue
        <h2>Soy un h2</h2>
        <p>Soy un parrafo</p> ----> blue 

Especifidad de "hijo": 

div > p { ----> solo va a teñir de color morado los hijos directos 
    color: purple; 
}

Especificidad de "descendiente": (El de toda la vida)

div p { ----> Todo parrafo que haya dentro de un div, aunque este luego metido en otras cosas como un section, se tiñe de morado.
    color: purple; 
}


MEDIDAS

Existen dos tipos de medidas: 

absolutas : (Es de un tamño y punto. No cambia segun la pantalla)

- px ---> pixeles 

relativas: (Relativo al tamaño de la pantalla)

- % 
- em --> elemento
- todas las demas.

EM 

em permite ajustar el tamaño del texto a diferentes pantallas. 

.text-container{
    font-size: 1.5em;
}

En este caso, multiplicara por 1.5em al tamaño por defecto. 



.text-container{
    font-size: 1.5em;
}

.text-container div{
    font-size: 1.5em;
}

Este seria el ejemplo el cual se tiene que tener cuidado. Porque va a multiplicar dos veces por 1.5 ya que al ir en cascada, primero se multiplica una vez y luego otra por estar dentro del div.


REM 

Un REM equivale a la cantidad por defecto la caja principal.
En un caso normal seria lo que nos da el html que para un parrafo es 16px 
1rem = 16px

html{
    font-size: 62.5%;
}
p{
    font-size: 1.6rem;
}
En este caso lo hemos modificado, lo que un 1rem equivale a 10px

rem es mejor utilizarlo, ya que este se modifica segun el elemento raiz, mientras que px, es un tamaño fijo. 

min-width max-width 

section{
    width: 80%;
    min-width: 320px; ----> Este es el tamaño minimo que va a tener el section 
    max-width: 500px; ----> Es va a ser el tamaño maximo que va a tener el section
    min-height: 500px; -----> El minimo del alto que va a tener
    max-height: 100vw; -----> El maximo de alto que va a tener
    margin: 0 auto;
    background-color: red;
}

De esta forma, el contenido se va a adaptar mejor. 


POSITION 

Todas las cajas y elementos dentro de html, estan por defecto en static. 

Existen otros tipos como 

absolute

Este no guarda la posición y se sobre pone si hace falta. 

relative

Este se coloca en otra parte, pero el hueco donde el existe como tal, no se modifica. 

Este es el position que tiene, donde los hijos, toman referencia dentro de la caja padre, por lo que permite centrarlos o colocarlos en la posición que quedamos dentro de la caja padre, (aunque si ponemos demasiados pixeles, se saldran de la caja). 

DISPLAY : flex

El display: flex, permite que las cajas de contenido coexistan entre si, pudiendo colocarse en la misma linea si este no ocupa todo el espacio en el navegador. Es importante colocarlo en el contenedor padre y no en los hijos. 

Si se quiere hacer que varias cajas hagan una cosa en concreto. Lo mejor es meterlas dentro de un contenedor padre y aplicarle los estilos a el. 

CREACION DE VARIABLES EN CSS

Las variables son utilizadas en css para evitar errores humanos y para ahorrar codigo 

:root{
    --primary-color: #003476;
    --secondary-color: #b4d2f7;
    --header-size: 4rem; 
    --font:1.8rem; 
}

Esta es la forma correcta de creacion de 4 variables. 

Son creadas así --nombre: "contenido de variable"

Son llamadas así var(--nombre)

De esta forma, los colores los cuales son llamados por su codigo, evitamos el error humano de que este se equivoque en un número.

De esta forma podemos unificar, partes del codigo, llamando a la variable en vez de llamarlas cada vez que se necesiten. 


FONT

Fuentes o tipografia de texto. 
Hay un conjunto de tipografias las cuales ya vienen programadas en todas las conputadoras.
Estas son conodicas como generic.families

senif 

sand-senif 

cursive

monospace

Estas seran las que carguen cuando no se pueda cargar aquellas menos comunes.

Por norma general, es preferible que solo se cargue 1 fuente. 
Poner la etiqueta en el head.
Evitar el import. 

Los links son peticiones a servidores que pueden cambiar con el tiempo, ademáss que no es algo que uno controle, por lo que puede alterar nuestro producto final. 


MEDIA QUERIES 

Es el formato que nos permite modificar la estructura de nuestra pagina web, segun el tamaño de la pantalla que tenga el usuario. 

Existe un formato, el cual es usado en la mayoria de productos a dia de hoy, que es "Mobile First/Only", el cual diseña el producto para los moviles. Empezando desde las pantallas mas pequeñas a las mas grandes. 

Lo mejor para esto es no tener un css con todo, sino un css para cada pantalla, lo que permitirá al usuario no cargar todos los estilos del css sino solo, los de su tipo de pantalla. 

Para poder hacer bien Media Queries es creando varias hojas de CSS para cada formato. 


Recomendaciones Responsive !!!! 

Dividir el proyecto. En codigo más simple 
Por ejemplo en vez de tener una sola hoja de css, poner varias para cada tamaño. Normalmente los dispositivos con pantallas más grandes suelen tener mas procesador. 
De esta forma no se cargan estilos que n se van a usar. 


Forma correcta para poner una imagen: 
<picture>
    <source media="(min-width:1000px)"  srcset="img/imagenMediana.jpg">
    <source media="(min-width:1300px)"  srcset="img/imagenGrande.jpg">
    <img src="img/imagenPequeña.jpg" alt="Imagen de Ejemplo">
</picture>


ACCESIVILIDAD 

Para evitar que las paginas las puedan usar personas con dificultad visual que necesitan letras grandes, en vez de usar px, usar rem, de esta forma cuando la persona vaya a su menu e configuracionh y lo aumente, este podra modificarlo, cosa que no px no. 


Una imagen accesible se escribe así: 

<img 
    src="" 
    alt="Es un zapato" ---> Es lo que sale cuando no carga la imagen y para personas ciegas, lee lo que pone en esta etiqueta.
    title="Es un perrito">  -> Cuando se pone el raton encima, te sale un cartelito con lo que ponga en title



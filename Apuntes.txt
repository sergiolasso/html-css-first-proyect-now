Front-end

Todo lo que tenga que ver con lo que ve el usuario. Que se vea bonito 

Tiene que manejar : 
 - HTML
 - CSS 
 - JS

La mayoria de trabajadores de este sector utilizan framewords, para poder ser mas eficientes


Preprocesdores CSS:  

Técnologias que se utilizan para trabajar con CSS de forma más comoda 


Compiladores de JS: 

Babel o webpack 


Como buena practica: 

Se debe de trabajar siempre sobre las ultimas versiones de JS 


Back-end 

Personas que trabajan la parte del servidor. Se encarga de las cosas que no vee el usuario, la parte lógica.

Se usaban varios lenguajes de programación. (Python, java, GO ...)

Frameworks paratrabajar en ello. (larabel, spring...) cada uno es para un lenguaje de programación distinto. 

Todo lo que se utilica de forma másiva (app store, hosting ...) debe subirse a la nube. 

Se encargan de la conexión a base de datos BB.DD. 


Full Stack 

Hace todo. Entiende todas las partes del proceso dentro de una app. 
No es lo más correcto debido a que hay muchas tecnología que se actualizan cada pocos meses. 

Es algo bastante habitual en pequeñas empresas 


Paginas estáticas (Landing pages)

Son paginas informativas. 
No suelen modificar la información que muestran una vez subida. 
El mejor ejemplo son los blogpop donde se comparte información pero el usuario apenas puede hacer nada. 


Paginas dinamicas (Web Apps)

Tiene una conexion a base de datos. 
Twitter, facebook, platzi ... van cambiando cada poco tiempo. 
El usuario puede interactuar. 
Suele ser necesario un registro para usarla. 
Usa base de datos. 

HTML 


<!DOCTYPE html> -----> En todas las paginas para que el navegador sepa donde esta
<html lang="es"> -----> Idioma 
<head> -----> contenido que no va a ver al usuario y que da información al servidor o buscador
    <meta charset="UTF-8"> -----> Caracteres especiales
    <meta name="description" content="Primera pagina slasso"> 
    
    -----> Descripcion de la pagina web 

    <meta name="robots" content="index, follow">

    -----> Cosas para que los algoritmos coloquen mejor la pagina 

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    -----> Responsive (Lo tiene que tener todas las paginas webs)

    <title>Mi tercera pagina web</title> -----> titulo pagina web
    <link rel="stylesheet" href="css/styles.css"> -----> conexion entre una pagina y las hojas de estilos
</head>
<body>
    
    -----> contenido real que va a ver el usuario
    
</body>
</html>

    <header> ----> Encabezado
        <nav></nav> -----> Menu de navegación
    </header>
    <main> -----> Contenido principal de la pagina
        <section> -----> Sección de contenido con varios articulos 
            <article></article> -----> Contenido de una sección
            <article></article>
        </section>
        <ul> ---> Creación de una lista desordenada. 
            <li>Soy una patata</li> ---> Elemento dentro de una lista.
            <li></li>
        </ul>
        <ol> -----> Creación de una lista ordenada. 
            <li>Soy una patata ordenada</li>
        </ol>
        <p>Soy un parrafo</p> ----> Creación de un parrafo 
        <h1>Soy un titulo</h1> -----> Creación de un titul o
        <h2>Soy un subtitulo</h2>
        <a href="index.html">Soy un link malicioso</a> -----> Etiquetas de un link. (Si no se ponde href la pagina se refresca)
    </main>
    <footer> -----> Pie de pagina de una web.
    </footer>


Tipos de imagenes 


Lossy (con pedida)

CALIDAD -
PESO -

JPG (fotos), JPEG 


Lossless (sin perdida)

CALIDAD + 
PESO +

PNG (transparencia), GIT, SVG (No se pixela / para logos)


OPTIMIZACIÓ DE IMAGENES 

Una imagen no debe de superar los 70 - 100 kB. 

ETIQUETAS DE IMAGENES 

<section>
    <figure> ----> Etiqueta encapsuladora de BB. PP. 
        <img src="/img/imagenGrande.jpg" alt="Grande"> -----> Etiqueta de imagen. alt -> Accesibilidad src -> direccion 
    </figure>
    <figcaption>Es una imagen de un gatete</figcaption> ----> Pie de la imagen. 
</section>

<video controls preload="auto"> ---> etiqueta de video 
                                -> controls es para los controles de video. 
                                --> preload="auto" es para que se vaya cargando el video. 

    <source src="img/little-cat.mp4#t=2,10"> ---> etiqueta para poner varios tipos de videos. mp3 mp4
</video>


Los formularios son muy importantes de cara a que es la forma en la que los usuarios nos dan informacion y siguen con los procesos de comprar por ejemplo.


<form action=""> ----> etiqueta para la creacion de un formulario
    <label for="nombre"> -----> elemento de un formulario
        <span>¿Cual es tu nombre? </span> ----> texto que sale en un formulario (nombre, fecha, apellidos)
        <input type="text" id="nombre" placeholder="Tu nombre"> ---> Zona donde se guardara lo que escriba el usuario.
        -> placeholder es una ayuda para que el usuario sepa que tiene que poner. 
        -> type indica el tipo de dato que se va a guardar.
    </label>
    <input type="datetime-local" id="calendario" name="calendario"> ---> el type datatime-local extrae los datos de fecha y hora de hoy lo que permite acelerar el rellenado de los datos y mejorando la actuación con el usuario. 
    <input type="submit"> ---> es el boton de enviar. 
</form>

El autocomplete permite al usuario rellenar los datos de un formulario con los datos que ya ha rellenado de forma habitual en otro. 

El required es utilizado para obligar al usuario a rellenar los campos obligatorios. 


La etiqueta select esta obsoleta. Con cada vez un mundo con más opciones en todo. La opción más como es ir escribiendo lo que uno desea, hasta que salga una opción con lo que uno quiere. 

OBSOLETO -> 

<select name="cursos" id="">
            <option value="">JavaScript</option>
            <option value="">HTML 5</option>
            <option value="">CSS3</option>
            <option value="">Web Standards</option>
</select>

Actual -> 

<input list="cursos">
    <datalist id="cursos">
        <option value="JavaScript"></option>
        <option value="HTML5"></option>
        <option value="CSS3"></option>
        <option value="Web Standards"></option>
    </datalist>

De esta forma el usuario puede ir escribiendo hasta encontrar lo que el quiere. 
Si por ejemplo no es ninguna de las opcciones que le hemos puesto en la lista. Podra mandarnos lo que el desea. 



CSS 3 

Funciona en cascada. 
Se trata de un estandar la cual nos permite estilizar las paginas webs 

Ejemplo: 

Escribes una carta: 
HTML es un lapiz, mientras que CSS es lapiz de color, los rotus y los colores. 

        <p style="font-size: 30px;">Soy un texto</p> ----> Esto es el método embebido. 

Una de las formas para la creaccion de clases para posteriormente poner los estilos se llama BEM. Esta metodología permite a los navegadores entenderlo mejor dando menos errores.         


EJEMPLOS DE PSEDOCLASES

.main-nav__item a:hover { ----> cuando el raton esta encima, es cuando se aplican estilos
    color: blue;
}

.main-nav__item a:active { -----> cuando el ratón ha hecho click, es cuando se aplican estos estilos. 
    color: red; 
}


Las pseudoclases, nos permiten, hacer modificaciones en los estilos cuando el usuario a interactuado con algún apartado de la pagina. 

EJEMPLO DE PSEUDO ELEMENTO --> MODIFICA EL CONTENIDO DEL HTML. 

.main-nav__item a:after { ----> se añade contenido despues de los elementos. 
    content: " | ";
}

En todos los buscadores, por defecto se añaden un padding y margin. 
Estos pueden eliminarse de la siguiente forma: 
*{ ----> Selector universal.
    box-sizing: border-box;
    padding: 0; 
    margin: 0;
}


HERENCIA EN CSS

Herencia cosiste en que si le has daod estilos al main y después tienes p dentro, p hereda lo que tenga el main. 

Hay una forma de ponerlo en css, la cual permite a este heredar si esta fuera. 

h1{
    font-size: inherit;
}

Con esto, h1 ha heredado el main en el que esta incluido. 


IMPORTANCA 

Esto sigue las misma normas que el tráfico. 
Si dos reglas de css, tienen el mismo nivel de importancia, ya que funciona es la más especifica, mientras que tiene la misma importancia y especificidad, sera la que más abajo se encuentre.

REGLA DE CASCADA

1. Se cargan los estilos del navegador 
2. Se cargan nuestro estilos.css
3. !important --> Quita todos los estilos que haya y hace lo que tenga ese important. 


ESPECIFICIDAD

1. !important
2. Las etiquetas embebidas en el HTML
3. # id
4. .class
5. tag 

Poner lo que más nos interese que salga en la parte de abajo. 


No es bueno poner estilos en el html, debido a que si después quieres modificarlo, no puedes ya que por nivel de importancia, el que manda es el que ponga las cosas en el html y el css tiene menos importancia. 




